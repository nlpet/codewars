u"""
Esolang: Ticker

Task:

Make an interpreter for an esoteric language called Ticker. Ticker is a
descendant of Tick. Your language has the following commands:

>: increment the selector by 1

<: decrement the selector by 1

*: add the ascii value of selected cell to the output tape

+: increment selected cell data by 1. If 256, then it is 0

-: increment selected cell data by -1. If less than 0, then 255

/: set selected cell data to 0

!: add new data cell to the end of the array

You start with selector at 0 and one cell with a value of 0. If selector goes
out of bounds, assume 0 for that cell but do not add it to the memory.
If a + or - is being made do not change the value of the assumed cell.
It will always stay 0 unless it is added to the memory

In other words:

data: start 0 end
selector:   ^
data start 1 2 4 end
selector:        ^
Assume that cell is zero.
Examples:

Consider the following program:
'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/'
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
'++++++++++++++++++++++++++*/+++++++++++++++++++++++++++++++++++++++++++++++'
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/++++++++++++'
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
'+++++++++++++++++++++*/++++++++++++++++++++++++++++++++++++++++++++++++++++'
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/++++++++++++++'
'++++++++++++++++++*/+++++++++++++++++++++++++++++++++++++++++++++++++++++++'
'++++++++++++++++++++++++++++++++*/+++++++++++++++++++++++++++++++++++++++++'
'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/+++'
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
'++++++++++++++++++++++++++++++++++++*/++++++++++++++++++++++++++++++++++++++'
'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/++++'
'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
'++++++++++++++++++++*/+++++++++++++++++++++++++++++++++*/'

It's output is this:

'Hello World!'

This is made just by using 1 data cell.

Example using multiple data cells:

'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*!'
'>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
'++++++++++++++++++++++++++++*!>+++++++++++++++++++++++++++++++++++++++++++'
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*!>++++++'
'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
'++++++++++++++++++++++++++++*!>+++++++++++++++++++++++++++++++++++++++++++'
'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*!>+++'
'+++++++++++++++++++++++++++++*!>++++++++++++++++++++++++++++++++++++++++++'
'+++++++++++++++++++++++++++++++++++++++++++++*!>++++++++++++++++++++++++++'
'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
'+++++++++++*!>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
'+++++++++++++++++++++++++++++++++++++++++++++++++++++*!>+++++++++++++++++++'
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
'++++++++++++++*!>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
'++++++++++++++++++++++++++++++++++++++++++*!>+++++++++++++++++++++++++++++++++*!>'

And it's output is still:

'Hello World!'

A more efficient example:

'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*!>++'
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
'++++++++++++++++++++++*!>+++++++++++++++++++++++++++++++++++++++++++++++++++++'
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++**!>+++++++++++++++++++'
'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
'++++++++++++++*!>++++++++++++++++++++++++++++++++*!>++++++++++++++++++++++++++'
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*<<*>>!>+++++++++'
'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
'+++++++++++++++++++++++++++*<<<<*!>>>>>++++++++++++++++++++++++++++++++++++++++'
'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*!>++++++++++++++++'
'+++++++++++++++++*'

Which still returns the classic:

'Hello World!'

Other characters are ingnored and therefore can serve as comments.
"""
from collections import defaultdict
import sys
sys.path.append('..')

from helpers.test_wrapper import Test


def interpreter(tape):
    memory, ptr, res = defaultdict(int), 0, []
    for cmd in tape:
        if cmd == '+':
            memory[ptr] = (memory[ptr] + 1) % 256
        elif cmd == '-':
            memory[ptr] = (memory[ptr] - 1) % 256
        elif cmd == '*':
            res.append(chr(memory[ptr]))
        elif cmd == '/':
            memory[ptr] = 0
        elif cmd == '>':
            ptr += 1
        elif cmd == '<':
            ptr -= 1
    return ''.join(res)


def run_tests():
    with Test() as test:
        s = (
            '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
            '++++++++++++*/++++++++++++++++++++++++++++++++++++++++++++++'
            '+++++++++++++++++++++++++++++++++++++++++++++++++++++++*/+++'
            '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
            '+++++++++++++++++++++++++++++++++++++++++++++*/+++++++++++++'
            '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
            '+++++++++++++++++++++++++++++++++++*/+++++++++++++++++++++++'
            '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
            '++++++++++++++++++++++++++++*/++++++++++++++++++++++++++++++'
            '++*/++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
            '+++++++++++++++++++++++++++++++*/+++++++++++++++++++++++++++'
            '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
            '++++++++++++++++++++++++*/++++++++++++++++++++++++++++++++++'
            '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
            '++++++++++++++++++++*/++++++++++++++++++++++++++++++++++++++'
            '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
            '++++++++++*/++++++++++++++++++++++++++++++++++++++++++++++++'
            '++++++++++++++++++++++++++++++++++++++++++++++++++++*/++++++'
            '+++++++++++++++++++++++++++*/'
        )
        test.assert_equals(interpreter(s), 'Hello World!')


if __name__ == '__main__':
    run_tests()
